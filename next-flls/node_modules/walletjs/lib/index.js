'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Money = undefined;

var _display = require('./display');

Object.keys(_display).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _display[key];
    }
  });
});

var _currency = require('./currency');

Object.keys(_currency).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _currency[key];
    }
  });
});

var _money = require('./money');

var _money2 = _interopRequireDefault(_money);

var _map = require('./helpers/map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/** Class representing a Wallet. */
var Wallet =

/**
* Create a new Wallet object.
* @param {Map} amount - A key/value Map with currency/value
*/
function Wallet() {
  var _this = this;

  var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new _map2.default();

  _classCallCheck(this, Wallet);

  this.getAmount = function (currency) {
    return _this.amount.get(currency) || 0;
  };

  this.add = function (money) {
    var currency = money.currency;
    var current = _this.getAmount(currency);
    return new Wallet(_this.amount.set(currency, money.add(current).getValue()));
  };

  this.subtract = function (money) {
    var currency = money.currency;
    var current = _money2.default.init(_this.getAmount(currency));
    return new Wallet(_this.amount.set(currency, current.subtract(money).getValue()));
  };

  this.convertCurrency = function (from, to, exchangeRate) {
    var fromAmount = _money2.default.init(_this.getAmount(from), { currency: from });
    var converted = fromAmount.multiplyBy(exchangeRate).getValue();
    return new Wallet(_this.amount.set(from, 0).set(to, converted));
  };

  this.amount = amount;
}

/**
* Returns a new Wallet with initial money
* @param {Money []} arrayOfMoney - An array of money
* @return {Wallet}
*/


/**
* Returns an amount by currency.
* @param {string} currency - A money currency
* @return {number}
*/


/**
* Returns a new Wallet with added Money.
* @param {Money} money - The money that will be added.
* @return {Wallet}
*/


/**
* Returns a new Wallet with subtracted Money.
* @param {Money} money - The money that will be subtracted.
* @return {Wallet}
*/


/**
 * Convert money with currency {from} in currency {true} using {exchangeRate}
 * @param {currency} from
 * @param {currency} to
 * @param {number} exchangeRate
 * @return {Wallet}
 */
;

Wallet.init = function () {
  for (var _len = arguments.length, arrayOfMoney = Array(_len), _key = 0; _key < _len; _key++) {
    arrayOfMoney[_key] = arguments[_key];
  }

  return arrayOfMoney.reduce(function (wallet, money) {
    return wallet.add(money);
  }, new Wallet());
};

exports.default = Wallet;
exports.Money = _money2.default;