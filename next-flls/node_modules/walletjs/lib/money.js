'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _intl = require('intl');

var _intl2 = _interopRequireDefault(_intl);

var _utils = require('./helpers/utils');

var _handler = require('./helpers/handler');

var _handler2 = _interopRequireDefault(_handler);

var _normalization = require('./helpers/normalization');

var _operations = require('./helpers/operations');

var _currency = require('./currency');

var _display = require('./display');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_LOCALE = 'en';

var DEFAULT_CURRENCY = _currency.CURRENCY_USD;

var DEFAULT_CURRENCY_DISPLAY = _display.DISPLAY_SYMBOL;

var DEFAULT_CURRENCY_FRACTIONALS = 2;

/** Class representing a Money. */

var Money =

/**
* Create a new Money object with the initial value.
* @param {number} value - The value to put on money
* @param {number} [locale=en] - The locale for this money
* @param {number} [currency=USD] - The currency to use in currency formatting.
* @param {number} [currencyFractionals=2] - The currency fractionals to use in currency formatting
*/
function Money(value) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _ref$locale = _ref.locale,
      locale = _ref$locale === undefined ? DEFAULT_LOCALE : _ref$locale,
      _ref$currency = _ref.currency,
      currency = _ref$currency === undefined ? DEFAULT_CURRENCY : _ref$currency,
      _ref$normalized = _ref.normalized,
      normalized = _ref$normalized === undefined ? false : _ref$normalized,
      options = _objectWithoutProperties(_ref, ['locale', 'currency', 'normalized']);

  _classCallCheck(this, Money);

  _initialiseProps.call(this);

  this.currencyFractionals = (0, _utils.getValue)(options.currencyFractionals, DEFAULT_CURRENCY_FRACTIONALS);
  (0, _utils.isValidCurrencyFractionals)(this.currencyFractionals);
  this.DEFAULT_INTL_OPTIONS = {
    minimumFractionDigits: this.currencyFractionals,
    maximumFractionDigits: this.currencyFractionals
  };
  this.value = normalized ? value : (0, _normalization.normalize)(this.currencyFractionals, value);
  this.locale = locale;
  this.currency = currency;
}

/**
* Create a new Money object with the initial value.
* @param {number} value - A value to put on money
* @param {number} [locale=en] - The locale for this money
* @param {number} [currency=USD] - The currency to use in currency formatting.
* @param {number} [currencyFractionals=2] - The currency fractionals to use in currency formatting
* @return {Money} The money with value
*/


/**
* Create a new Money object from String value
* @param {string} string - A value to put on money
* @param {number} [locale=en] - The locale for this money
* @param {number} [currency=USD] - The currency to use in currency formatting.
* @return {Money} The money with value
*/


/**
 * Adds a value to money
 * @param {number} value - A value to put on money
 * @return {Money} The money with new value
 */


/**
 * Subtract a value to money
 * @param {number} value - A value to remove from money
 * @return {Money} The money with new value
 */


/**
 * Multiply your money by value
 * @param {number} value - A value to multiply
 * @return {Money} The money with new value
 */


/**
 * Divide your money by value
 * @param {number} value - A value to divide
 * @return {Money} The money with new value
 */


/**
 * Get current value
 * @return {number} The value on Money
 */


/**
 * Get money locale
 * @return {string}
 */


/**
* Return a formatted currency of Money
* @param {number} [currencyDisplay=symbol] - How to display the currency in currency formatting.
* @return {string} currency number of money
*/


/**
* Formatted value of Money
* @return {string} formatted number of money
*/
;

Money.init = function () {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var options = _objectWithoutProperties(_ref2, []);

  return new Money(value, options);
};

Money.fromString = function () {
  var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '0';

  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var options = _objectWithoutProperties(_ref3, []);

  return new Money(string, options);
};

var _initialiseProps = function _initialiseProps() {
  var _this = this;

  this.add = function (value) {
    return (0, _handler2.default)(_operations.sum.bind(_this, value), _this);
  };

  this.subtract = function (value) {
    return (0, _handler2.default)(_operations.subtract.bind(_this, value), _this);
  };

  this.multiplyBy = function (value) {
    return (0, _handler2.default)(_operations.multiply.bind(_this, value), _this);
  };

  this.divideBy = function (value) {
    return (0, _handler2.default)(_operations.divide.bind(_this, value), _this);
  };

  this.getValue = function () {
    return (0, _normalization.denormalize)(_this.currencyFractionals, _this.value);
  };

  this.getLocale = function () {
    return _this.locale;
  };

  this.toCurrency = function () {
    var currencyDisplay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CURRENCY_DISPLAY;

    var options = _extends({}, _this.DEFAULT_INTL_OPTIONS, {
      style: 'currency',
      currency: _this.currency,
      currencyDisplay: currencyDisplay
    });
    var intl = new _intl2.default.NumberFormat(_this.locale, options);
    return intl.format((0, _normalization.denormalize)(_this.currencyFractionals, _this.value));
  };

  this.toString = function () {
    var intl = new _intl2.default.NumberFormat(_this.locale, _this.DEFAULT_INTL_OPTIONS);
    return intl.format((0, _normalization.denormalize)(_this.currencyFractionals, _this.value));
  };
};

exports.default = Money;